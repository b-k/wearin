
# Glitch

There's a phrase, 'played that song so often I wore out the grooves'. This was in fact possible, just as it's possible to play a cassette tape so many times it snaps.

I [bk] have music on whatever medium that already has glitches, and have grown to expect them. Those glitches are part of the song as it is for me, and a reminder of where the music came from. Sometimes I hear the song played without the glitch and I'm thrown off.

Run the program from the command line via `glitch popsong.mp3`. It will randomly flip 100 bytes in the song. 

## Compiling

Buckle up, because unlike Python et al, you'll have to compile this program. To do so, type 

`make`

at the command prompt. You should now see the executable `glitch` next to the source, `glitch.c`.

If you don't have a C compiler, you will be informed. Apple users may need to register with Apple, Inc and download the otherwise free Xcode. Linux/Cygwin users, try installing `clang` from your package manager.

## The shell script

The `wearin.tsr` script runs in the background and adds wear any time you play a song. It
does so by checking for new MP3 or M4A files in the list of files the system is using
(via the `lsof` command). Every time a new music file appears, the script runs `wearin`
on it.

(As long as we're emulating '90s media, we can emulate '90s computing: the script is a TSRâ€”terminate and stay resident.)


## Q&A

#### Why 100 bytes?
Because mp3 is a surprisingly reliable format, with a great deal of error-checking built
in, and the odds are good that most of the inserted glitches have no effect at all.

* Warning: don't wear headphones! Glitching can sometimes manifest in suddenly very loud noises.
